Practical No : 1 

Step 1: Create the Employees Table sql

CREATE TABLE Employees (
    employee_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,  -- Auto-increment in Oracle
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    hire_date DATE DEFAULT SYSDATE,
    salary NUMBER CHECK (salary >= 3000),
    department_id NUMBER,  -- Will be used for foreign key constraint later
    PRIMARY KEY (employee_id)
);

Step 2: Create Sequence employee_seq

CREATE SEQUENCE employee_seq
    START WITH 1001
    INCREMENT BY 1;

To insert a new employee record using this sequence:

INSERT INTO Employees (employee_id, first_name, last_name, email, hire_date, salary, department_id)
VALUES (employee_seq.NEXTVAL, 'John', 'Doe', 'johndoe@example.com', SYSDATE, 4000, NULL);

Step 3: Create View EmployeeView

CREATE VIEW EmployeeView AS
SELECT employee_id, first_name, last_name, salary
FROM Employees
WHERE salary >= 5000;

Step 4: Create Index on email Column

CREATE INDEX email_index ON Employees (email);

Step 5: Create Synonym Emp for the Employees Table

CREATE SYNONYM Emp FOR Employees;

Step 6: Create Departments Table and Add Foreign Key in Employees
Create the Departments Table:

CREATE TABLE Departments (
    department_id NUMBER PRIMARY KEY,
    department_name VARCHAR2(100) NOT NULL
);

Alter Employees to Add Foreign Key Constraint:

ALTER TABLE Employees
ADD CONSTRAINT fk_department
FOREIGN KEY (department_id)
REFERENCES Departments (department_id);

=======================================END Practical No 1=======================================================


Practical No : 2 

1. Create a table named Employees with the following columns:
 employee_id (primary key, auto-increment)
 first_name (not null)
 last_name (not null)
 email (unique, not null)
 hire_date (default to the current date)
 salary (greater than or equal to 3000)

CREATE TABLE Employees (
    employee_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,  -- Auto-increment in Oracle
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    hire_date DATE DEFAULT SYSDATE,
    salary NUMBER(15, 2) CHECK (salary >= 3000),  -- Ensuring salary is >= 3000
    PRIMARY KEY (employee_id)
);


2.Alter the salary column in the Employees table to increase its size to DECIMAL(15, 2).

ALTER TABLE Employees
MODIFY salary NUMBER(15, 2);

3. Rename the Employees table to Staff.

ALTER TABLE Employees
RENAME TO Staff;

4. Create a composite index idx_name_salary on the first_name and salary columns in the
Employees table to speed up queries that filter on both fields.

CREATE INDEX idx_name_salary ON Staff (first_name, salary);

5. Create a check constraint on the hire_date column of the Employees table to ensure that no
employee can have a hire date in the future.

ALTER TABLE Staff
ADD CONSTRAINT chk_hire_date CHECK (hire_date <= SYSDATE);

=========================================END practical No 2==============================================================

Practical No : 3 

1. Create the following tables :
 Students (student_id, first_name, last_name, email, department_id, enrollment_date,
phone_number)
 Departments (department_id, department_name)
 Courses (course_id, course_name, department_id, course_fee)
 Enrollments (enrollment_id, student_id, course_id, enrollment_date, grade)

CREATE TABLE Students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    department_id INT,
    enrollment_date DATE,
    phone_number VARCHAR(15)
);

CREATE TABLE Departments (
    department_id INT AUTO_INCREMENT PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL
);

CREATE TABLE Courses (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    course_name VARCHAR(100) NOT NULL,
    department_id INT,
    course_fee DECIMAL(10, 2)
);

CREATE TABLE Enrollments (
    enrollment_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    course_id INT,
    enrollment_date DATE,
    grade CHAR(1),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

2. Get a list of all students in the university, showing their first and last names, email, and
department name.

SELECT s.first_name, s.last_name, s.email, d.department_name
FROM Students s
JOIN Departments d ON s.department_id = d.department_id;

3. Insert a new student into the Students table.

INSERT INTO Students (first_name, last_name, email, department_id, enrollment_date, phone_number)
VALUES ('John', 'Doe', 'johndoe@example.com', 1, CURDATE(), '123-456-7890');

4. Update the email address of the student with student_id = 1002.

UPDATE Students
SET email = 'newemail@example.com'
WHERE student_id = 1002;

Step 5: Delete a Student Record from Students Where student_id = 1002

DELETE FROM Students
WHERE student_id = 1002;

Step 6: Retrieve All Courses Offered by the "Computer Science" Department

SELECT c.course_name, c.course_fee
FROM Courses c
JOIN Departments d ON c.department_id = d.department_id
WHERE d.department_name = 'Computer Science';

Step 7: Find the Names of All Students Enrolled in the Course "Database Systems"

SELECT s.first_name, s.last_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id
WHERE c.course_name = 'Database Systems';

Step 8: Insert a New Enrollment for student_id = 1001 in course_id = 201

INSERT INTO Enrollments (student_id, course_id, enrollment_date, grade)
VALUES (1001, 201, CURDATE(), 'A');

================================================END Practical No 3===============================================

Practical NO : 4 

Step 1: Create the Tables
Students Table

CREATE TABLE Students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    department_id INT,
    enrollment_date DATE,
    phone_number VARCHAR(15)
);

Departments Table

CREATE TABLE Departments (
    department_id INT AUTO_INCREMENT PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL
);

Courses Table

CREATE TABLE Courses (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    course_name VARCHAR(100) NOT NULL,
    department_id INT,
    course_fee DECIMAL(10, 2)
);

Enrollments Table


CREATE TABLE Enrollments (
    enrollment_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    course_id INT,
    enrollment_date DATE,
    grade VARCHAR(2),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

Step 2: Update the Grade of student_id = 1001 for course_id = 201 to 'B+'

UPDATE Enrollments
SET grade = 'B+'
WHERE student_id = 1001 AND course_id = 201;

Step 3: Get the Number of Students Enrolled in Each Course Along with the Course Name

SELECT c.course_name, COUNT(e.student_id) AS student_count
FROM Courses c
LEFT JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_id;

Step 4: Find All Students Who Have Not Enrolled in Any Courses

SELECT s.first_name, s.last_name, s.email
FROM Students s
LEFT JOIN Enrollments e ON s.student_id = e.student_id
WHERE e.enrollment_id IS NULL;

Step 5: Retrieve the first_name, last_name, and email of All Students Enrolled in the "Mathematics" Department

SELECT s.first_name, s.last_name, s.email
FROM Students s
JOIN Departments d ON s.department_id = d.department_id
WHERE d.department_name = 'Mathematics';

Step 6: Find All Courses Where the course_fee is Greater Than 2000, Displaying the Course Name and Fee

SELECT course_name, course_fee
FROM Courses
WHERE course_fee > 2000;

=====================================================END Practical No 4 ========================================

Practical No : 9 

Step 1: Create the students Table

CREATE TABLE students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    birthdate DATE,
    email VARCHAR(100) UNIQUE,
    enrollment_date DATE
);

Step 2: Add a Column phone_number to the students Table

ALTER TABLE students
ADD phone_number VARCHAR(15);

Step 3: Change the Data Type of the email Column from VARCHAR(100) to VARCHAR(255)

ALTER TABLE students
MODIFY email VARCHAR(255) UNIQUE;

Step 4: Remove the phone_number Column from the students Table

ALTER TABLE students
DROP COLUMN phone_number;

Step 5: Rename the enrollment_date Column to date_of_enrollment

ALTER TABLE students
RENAME COLUMN enrollment_date TO date_of_enrollment;

Step 6: Create an Index on the email Column

CREATE INDEX idx_email ON students (email);

Step 7: Drop the Entire students Table from the Database

DROP TABLE students; 


=========================================================END Practical No 9 ==============================================================

Practical No : 10 

Step 1: Create the students Table

CREATE TABLE students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100),
    birthdate DATE
);

Step 2: Insert a New Student into the students Table

INSERT INTO students (first_name, last_name, email, birthdate)
VALUES ('John', 'Doe', 'john.doe@example.com', '1998-05-12');

Step 3: Insert Two New Students into the students Table


INSERT INTO students (first_name, last_name, email, birthdate)
VALUES 
    ('Jane', 'Smith', 'jane.smith@example.com', '2000-08-22'),
    ('Alice', 'Brown', 'alice.brown@example.com', '1999-11-15');

Step 4: Select All Columns from the students Table

SELECT * FROM students;

Step 5: Retrieve the first_name, last_name, and email of All Students

SELECT first_name, last_name, email FROM students;

Step 6: Update the Email Address of the Student with student_id = 1

UPDATE students
SET email = 'john.doe2024@example.com'
WHERE student_id = 1;

Step 7: Delete the Student Record Where student_id = 3

DELETE FROM students
WHERE student_id = 3;



